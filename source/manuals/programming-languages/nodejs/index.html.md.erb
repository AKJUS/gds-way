---
title: Using Node.js at GDS
---

# <%= current_page.data.title %>

## Important Note

New projects at GDS should never use Node.js without prior consultation with the 
GDS Way Forum. Topics like this are discussed at our monthly meetings. The [programming language recommendations](../../../standards/programming-languages.html#javascript) 
section has more detail on how we currently use Node.js at GDS and why this 
decision has been made.

## Guidance
The guidance set out here should be followed in conjunction with the advice on the main [programming languages manual page](../../programming-languages.html).

If you want to add guidance on Node.js please see [Updating this manual](#updating-this-manual) below.

### Style
#### Formatting and linting
To maintain a consistent and readable JavaScript codebase we use [StandardJS]. This includes a built in formatter, linter and automatic code fixer (auto-fix). To make sure everything stays clean we recommend running this tool before each commit. It is possible to setup a pre-commit hook to automate this process. When [StandardJS] automatically fixes errors it has clear and concise messaging and it also tells you when an automatic fix isn't possible.

We’ve encapsulated our recommended process into a separate [repository](https://github.com/alphagov/nodejs-starter) where everything is controlled by a few lines of config within your `package.json` file. Once you have run `npm install`, any time you make a commit, [StandardJS] runs. It will then format and lint your code automatically. [StandardJS] will auto-fix obvious errors then continue with your commit. If there’s something it can’t fix, then the commit fails with a useful error message such as:

```
❯ Running tasks for *.js
   ✖ standard --fix
     → standard: Use JavaScript Standard Style (https://standardjs.com)
     git add
✖ standard --fix found some errors. Please fix them and try committing again.
  ~/nodejs-starter/index.js:5:9: 'hello' is assigned a value but never used.

```

#### Editor plugins
It’s useful to highlight lint errors before starting the commit process. To do this you can get live linting in your text editor of choice by installing one of [Standard’s plugins](https://standardjs.com/#are-there-text-editor-plugins). Users of [SublimeLinter](http://www.sublimelinter.com/) will find [StandardJS] will work out of the box using the default config.

### Structure
As well as having a consistent code style, it is important that our projects and repositories are structured in similar ways. This allows developers to find things quickly and easily. We want our code to be modular and reusable so our project structure should reflect this. Below are our four guiding principles: (thanks to [Rising Stack](https://blog.risingstack.com/) for this [blog post](https://blog.risingstack.com/node-hero-node-js-project-structure-tutorial/)).

#### Organise files around features, not roles
The following structure means you don’t require lots of context switching to find related functions and your `require` statements don’t need overly complicated paths.

```
├── product
|   ├── index.js
|   ├── product.js
|   ├── product.spec.js
|   └── product.njk
├── user
|   ├── index.js
|   ├── user.js
|   ├── user.spec.js
|   └── user.njk
```

#### Don’t put logic in index.js files
Use these files to `require` all the modules functions.

```js
// product/index.js
const product = require('./product')

module.exports = {
  create: product.create
}
```

#### Store test files within the implementation
Keeping tests in the same directory makes them easier to find and more obvious when a test is missing. Keep the projects global test config and setup scripts in a separate `test` directory.


```
├── test
|   └── setup.spec.js
├── product
|   ├── index.js
|   ├── product.js
|   ├── product.spec.js
|   └── product.njk
```

#### Use a config directory
Keep your configuration together in a config folder.

```
├── config
|   ├── index.js
|   └── server.js
├── product
├── user
```

### Versions
We should only use Long Term Support (<abbr title="Long term support">LTS</abbr>) versions of Node.js. These are even numbered versions (e.g Node 6.x or 8.x). However, it is important to keep an eye on the [Node.js LTS Schedule] as to when versions move in and out of LTS.

### Further resources
* **[Node.js best practices]** — A comprehensive guide to Node.js best practices
* **[node.cool]** — A curated list of Node.js packages and resources by Sindre Sorhus
* **[Node ES2015 support]** — Check Node.js support for ES2015+ features
* **[JS documentation]** — MDN's definitive JS docs

## Updating this manual
This manual is not presumed to be infallible or beyond dispute. If you think something is missing or if you'd like to see something changed then:

1. _(optional)_ Start with the [#Nodejs] community's Slack channel to see what other developers think. You will then understand how likely it is that your proposal will be accepted as a pull request before you complete any work.
2. Check out the making changes section of the [GDS Tech repo][github-gds-tech-readme-making-changes]
3. Create a pull request against [GDS Tech repo][github-gds-tech]

[github-gds-tech]: https://github.com/alphagov/gds-tech
[github-gds-tech-readme-making-changes]: https://github.com/alphagov/gds-tech/blob/master/README.md#making-changes
[StandardJS]: https://standardjs.com/
[Node.js LTS Schedule]: https://github.com/nodejs/Release
[#Nodejs]: https://govuk.slack.com/messages/nodejs
[node.cool]: https://node.cool
[Node ES2015 support]: http://node.green/
[JS documentation]: https://developer.mozilla.org/en-US/docs/Web/JavaScript
[Node.js best practices]: https://github.com/i0natan/nodebestpractices
