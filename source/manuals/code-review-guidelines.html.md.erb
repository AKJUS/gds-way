---
title: How to review code
---

# <%= current_page.data.title %>

By thoroughly reviewing code during the development process it can help teams produce quality code and find bugs early in their projects.

Reviewing code encourages knowledge sharing in your team and helps less experienced people learn about your code. A comprehensive review will keep your code maintainable and reusable, indicating gaps in documentation and encouraging developers to write clearer [GitHub pull requests (PR)][].

Your code review should aim to:

* give appropriate positive feedback
* flag up major issues quickly and in person if necessary
* clarify any parts of the code that are unclear
* use the [GitHub review feature][] where possible

When suggesting a change:

* indicate if it’s optional or just personal preference
* give a short example if necessary
* explain your reasoning, [refer to a programming language style guide][]

You should not:

* approve a request you don’t fully understand
* rush the review, even if it’s urgent
* repeatedly point out the same error pattern
* leave single comments without context

## Suggested questions when reviewing code

When you review a PR think about the overall purpose of the code when asking questions. For example does the PR:

* have a clear purpose
* capture the simplest way to solve a problem
* provide a temporary fix for a much bigger problem
* suggest a change or changes outside the project’s scope
* need breaking into smaller pull requests

You should also consider if a PR’s suggested changes will contribute to [technical debt][] or if anything should be rewritten to help solve existing technical debt. If there are wider problems with the code, it’s useful to have a face-to-face chat with the person who raised the PR.

You can use these questions to help speed up your review process.

## Programming style

Consider if the code has:

* linting issues, you could run automated linting before allowing a PR to be merged, for example with [Travis CI][]
* an applicable edge case, like how it handles nulls/errors
* patterns consistent with similar code elsewhere in your codebase
* readable variable names, accurately representing their contents
* adheres to the principles of its language, for example, [The Zen of Python][]
* missing or additional elements following a merge or rebase
* any unclear lines - would more commenting be helpful
* capacity for reusability - can existing code be reused to do the same thing

## Code libraries

It might be helpful to ask if the:

* changes are backwards compatible
* version number has been updated
* changelog needs to be updated - especially if there are major problems

## Third party dependencies

When reviewing code, are new or updated third party dependencies:

* trustworthy
* open source
* well maintained
* essential for the code

Could the new dependency break anything, is it compatible with the version of the language used. The Service Manual contains some guidance about [managing software dependencies][].

## Testing

Code changes should have appropriate test coverage. Consider running any new tests as part of your review, and ask whether:

* null/error cases are covered
* the tests pass in all appropriate environments
* unit tests are enough or are integration tests needed
* test names describe what’s happening in the test

## Deployment

Consider whether code changes will impact on the deployment process:

* are self-contained in their code repository
* could affect other applications and systems
* have any potential security issues
* will have any deployment problems

The Service Manual has some useful suggestions to think about when [deploying software][].

## Further Reading

You can find out more about how to review code by following these links:

* [GOV.UK pull request guidelines][] - pull requests style guide for working on GOV.UK
* [Code Review Guidelines][] - checklists for code authors and reviewers
* [How to code review like a human][] - blog post on the social aspects of code review
* [Effective code reviews][] - blog post on phrasing review comments positively
* [Better Code Reviews][] - collated feedback and data from a developer survey



[GitHub pull requests (PR)]: https://help.github.com/articles/about-pull-requests/
[GitHub review feature]: https://help.github.com/articles/about-pull-request-reviews/
[refer to a programming language style guide]: https://gds-way.cloudapps.digital/manuals/programming-languages.html
[technical debt]: https://insidegovuk.blog.gov.uk/2018/02/19/classifying-and-measuring-tech-debt-in-gov-uk/
[Travis CI]: https://travis-ci.org/
[The Zen of Python]: https://www.python.org/dev/peps/pep-0020/
[managing software dependencies]: https://www.gov.uk/service-manual/technology/managing-software-dependencies
[deploying software]: https://www.gov.uk/service-manual/technology/deploying-software-regularly
[GOV.UK pull request guidelines]: https://github.com/alphagov/styleguides/blob/master/pull-requests.md#reviewing-a-request
[Code Review Guidelines]: https://engineeringblog.yelp.com/2017/11/code-review-guidelines.html
[How to code review like a human]: https://mtlynch.io/human-code-reviews-1/
[Effective code reviews]: https://codeahoy.com/2016/04/03/effective-code-reviews/
[Better Code Reviews]: http://www.bettercode.reviews/
