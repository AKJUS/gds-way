---
title: How to use continuous delivery (CD)
expires: 2018-10-08
last_reviewed_on: 2018-04-08
review_in: 6 months
---

# <%= current_page.data.title %>

When your team uses [Continuous Delivery (CD)][] you can implement changes like new features or configuration updates quickly and safely, by adopting CD you:

Enable frequent iterations - it’s cheaper and easier to deliver small changes to production. Releasing to production multiple times a day means you quickly get feedback from users.

[Deploy low risk releases][] - frequent small changes make it easier to diagnose problems and the cost of fixing them is much lower than with large releases.

[Build quality software][] - automated test suites allow you to quickly identify regressions in your software so you can focus on exploratory, usability, performance and security testing.

Have maintainable code - building and releasing software in small pieces helps you focus on writing small composable bits of code. This means code is easier to maintain and change.

## Feature branching

With [continuous integration][] you integrate with a shared main-line at least once a day, for example using source-control branching models like [Trunk-Based Development][].

If your team’s environment is heavily regulated and you need to prove all changes are reviewed, you should raise and merge frequent small pull requests. Tools like [Fourth Wall Helpful][] will help you build a team culture that supports this practice.

Use approaches such as [feature-flagging][] or [modular architectures][] to deploy partially complete features. By working in this way you can reduce the size of changes going to production and encourage your team to build modular, configurable systems.

Read more about [feature branching][].

## Production monitoring

You can understand the impact of your changes on [production using production monitoring and alerting][]. Monitoring essential parts of your system allows you to see if changes have any unintended impacts and to respond quickly in the event of problems.

## Performance metrics

It’s important to [set performance metrics for your service][] and [monitor its status][].

[Accelerate The Science of Lean Software and Devops: Building and Scaling High Performing Technology Organizations][] shares three metrics that correlate with high performing teams:

- lead time to change - cycle time
- mean time to recovery
- frequency of releases

You can use these metrics to understand how effective your build and release process is and measure the impact of any changes.

## Further reading

You can find out more about CD from:

- [Architecting for Continuous Delivery by Jez Humble at Agile India 2016][] - Architecting for Continuous Delivery (video)
- Continuous Delivery
- [Accelerate][] - The Science of Lean Software and Devops: Building and Scaling High Performing Technology Organizations
- [Trunk Based Development][] - a source control branching method

[Continuous Delivery (CD)]: https://www.continuousdelivery.com/
[Deploy low risk releases]: http://www.informit.com/articles/article.aspx?p=1833567
[Build quality software]: https://continuousdelivery.com/foundations/test-automation/
[continuous integration]: https://martinfowler.com/bliki/ContinuousIntegrationCertification.html
[Trunk-Based Development]: https://trunkbaseddevelopment.com/
[Fourth Wall Helpful]: https://github.com/alphagov/fourth-wall
[feature-flagging]: https://featureflags.io/2016/10/28/continuous-delivery-coding-patterns-feature-toggles/
[modular architectures]: https://continuousdelivery.com/implementing/architecture/
[feature branching]: https://www.martinfowler.com/bliki/FeatureBranch.html
[production using production monitoring and alerting]: https://gds-way.cloudapps.digital/standards/monitoring.html
[set performance metrics for your service]: https://www.gov.uk/service-manual/measuring-success/how-to-set-performance-metrics-for-your-service
[monitor its status]: https://www.gov.uk/service-manual/technology/monitoring-the-status-of-your-service
[Accelerate The Science of Lean Software and Devops: Building and Scaling High Performing Technology Organizations]: https://medium.com/slashdeploy/book-review-accelerate-92ebc00f4354
[Architecting for Continuous Delivery by Jez Humble at Agile India 2016]: https://www.youtube.com/watch?v=Lx9ssegE6FA
[Accelerate]: https://wordery.com/accelerate-nicole-forsgren-phd-9781942788331?cTrk=OTc2NDYwNzZ8NWI2ZDg5NGJkYzAyZjoxOjE6NWI2ZDg5NDQwM2ZhODguNDU0MTgxMTU6ODJlODM3ODY%3D
[Trunk Based Development]: https://trunkbaseddevelopment.com/
