---
title: How to store credentials
last_reviewed_on: 2021-08-06
review_in: 6 months
---

# <%= current_page.data.title %>

Depending on how you [manage your accounts](/standards/accounts-with-third-parties.html), you, your team and the service you run may have credentials or other secrets that you need to store securely.

## Personal credentials

Examples include login details for:

- GitHub
- AWS
- GOV.UK Signon

[Use the password manager built into your browser in the first instance](https://lock.cmpxchg8b.com/passmgrs.html#conclusion).

If you can't do this for some reason, then it's OK to use a third-party password manager. This could be necessary if your browser has an accessibility issue, or if you work with multiple browsers.

Some of the third-party password managers people use at GDS include:

- [**LastPass**](https://www.lastpass.com/) - Approved by Information Assurance and available to install in the GDS Self Service app. However, the free version can only be used on one type of device.
- [**1Password**](https://1password.com/)
- [**BitWarden**](https://bitwarden.com/) - An open source password manager.
- [**KeePassXC**](https://keepassxc.org/) -  An offline password store, which you may want to backup somewhere.

⚠️  Warning! Browser extensions which autofill credentials have [serious security concerns](https://lock.cmpxchg8b.com/passmgrs.html#interprocess-communication). If do use an extension, consider configuring so that you manually copy / paste credentials instead of allowing it to autofill them.

## Team credentials

Examples include shared login details for:

- Software repositories e.g. npmjs.org, rubygems.org
- Admin portals e.g. Fastly, DockerHub

There's no established best practice for storing shared credentials at GDS. Some teams have a "credentials" GitHub repository and use [pass](https://www.passwordstore.org/) to store credentials encrypted with GPG. However, [this is fundamentally insecure](https://latacora.micro.blog/2019/07/16/the-pgp-problem.html) and we strongly encourage you to look around for possible alternatives. **Any GitHub repositories that contain secrets should be [internal or ideally private](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-repository-visibility)** to help limit access by former staff.

## Service credentials

Examples include:

- Functional account credentials e.g. API keys
- Sensitive configuration (e.g. IP block lists)

Some teams have "secrets" repositories and use GPG to encrypt files, which are then decrypted during the deployment process. As above, [storing secrets this way is fundamentally insecure](https://latacora.micro.blog/2019/07/16/the-pgp-problem.html) and we strongly encourage you to look around for possible alternatives. **Any GitHub repositories that contain secrets should be [internal or ideally private](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-repository-visibility)** to help limit access by former staff.
