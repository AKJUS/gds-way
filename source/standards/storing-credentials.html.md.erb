---
title: How to store credentials
last_reviewed_on: 2021-08-06
review_in: 6 months
---

# <%= current_page.data.title %>

Depending on how you [manage your accounts](/standards/accounts-with-third-parties.html), you, your team and the service you run may have credentials or other secrets that you need to store securely.

## Personal credentials

Examples include login details for:

- GitHub
- AWS
- GOV.UK Signon

[Use the password manager built into your browser in the first instance](https://lock.cmpxchg8b.com/passmgrs.html#conclusion). This is simpler than setting up an extra account with a third party and avoids some of the potential issues below.

If you can't do this for some reason, then it's OK to use a third-party password manager. This could be necessary if your browser has an accessibility issue, or if you work with multiple browsers.

Some of the third-party password managers people use at GDS include:

- [**LastPass**](https://www.lastpass.com/) - Approved by Information Assurance and available to install in the GDS Self Service app. However, the free version can only be used on one type of device.
- [**1Password**](https://1password.com/)
- [**BitWarden**](https://bitwarden.com/) - An open source password manager.
- [**KeePassXC**](https://keepassxc.org/) -  An offline password store, which you may want to backup somewhere.

⚠️  Warning! Browser extensions which autofill credentials have [serious security concerns](https://lock.cmpxchg8b.com/passmgrs.html#interprocess-communication). If do use an extension, consider configuring so that you manually copy / paste credentials instead of allowing it to autofill them.

## Team credentials

Examples include shared login details for:

- Software repositories e.g. npmjs.org, rubygems.org
- Admin portals e.g. Fastly, DockerHub

[Follow the guidance for managing team credentials in the fist instance](/standards/accounts-with-third-parties.html).

There's no established best practice for storing shared credentials at GDS. Some teams have a "credentials" GitHub repository and use [pass](https://www.passwordstore.org/) to store credentials encrypted with GPG. **Make sure you configure the repo as [internal or ideally private](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-repository-visibility)** to help prevent accidental disclosure.

Using GPG in this way isn't ideal because:

- We can't revoke access to credentials, unless we change them. Anyone who was given access can still decrypt credentials using their local copy of the repo and its commit history.

- It creates a high barrier to entry, especially for people less familiar with Unix tooling. We've found GPG tools are [generally difficult to use](https://latacora.micro.blog/2019/07/16/the-pgp-problem.html) and keyservers are unreliable.

Investigate alternatives before adopting GPG-based credential stores for new teams.

## Service credentials

Examples include:

- Functional account credentials e.g. API keys
- Sensitive configuration (e.g. IP block lists)

Use the secrets management feature of your infrastructure or cloud provider e.g. [AWS Secrets Manager](https://aws.amazon.com/secrets-manager/getting-started/), [HashiCorp Vault](https://www.vaultproject.io/). This should make it easy to control and audit access to the credentials.

Older (pre-cloud) projects in GDS tend to have a "secrets" repository and use GPG to encrypt files, which are then decrypted during the deployment process. However, using GPG [isn't ideal](https://latacora.micro.blog/2019/07/16/the-pgp-problem.html).
