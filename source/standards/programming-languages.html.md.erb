---
title: Programming languages
last_reviewed_on: 2024-02-15
review_in: 12 months
---

# <%= current_page.data.title %>

We use a range of programming languages at GDS because we think
using the right tool for the job gives us the best chance of building
services that best meet usersâ€™ needs. This document does not apply to
choosing 'off the shelf' software (open source or not).

We focus on using a small number of programming languages for
core software development tasks.

This should make it easier for developers to:

- move around the organisation
- develop shared components
- improve their personal development
- master how they operate applications

## Frontend development

The Service Manual has information on
[using client-side JavaScript][manual_js]. For server-side JavaScript we use [Node.js][nodejs].


[nodejs]: https://nodejs.org/
[manual_js]: https://www.gov.uk/service-manual/technology/using-progressive-enhancement

GDS projects using Node.js include:

- [GOV.UK Frontend](https://github.com/alphagov/govuk-frontend)
- [GOV.UK Pay](https://www.payments.service.gov.uk/)
- [GOV.UK PaaS](https://www.cloud.service.gov.uk/) (TypeScript)
- [GOV.UK Prototype Kit](https://govuk-prototype-kit.herokuapp.com/docs)
- [GOV.UK One Login](https://www.sign-in.service.gov.uk/) - see [repositories in TypeScript][di-ts] and [in JavaScript][di-js]

[di-ts]: https://github.com/search?l=TypeScript&q=user%3Aalphagov+topic%3Adigital-identity&type=Repositories
[di-js]: https://github.com/search?l=JavaScript&q=user%3Aalphagov+topic%3Adigital-identity&type=Repositories

You can use Node.js to render a web interface for your service. For example,
GOV.UK Pay has created thin, client-facing applications that do not store
data (although they may retrieve data from an API).

You can use [TypeScript](https://www.typescriptlang.org/) when teams think it's
appropriate. For example, the GOV.UK PaaS team uses TypeScript
because they are used to working with a statically typed, compiled language,
and they think the compilation and static-analysis tooling is better for
their workflow. There's more information about TypeScript on the
[Node.js page](/manuals/programming-languages/nodejs/).

## Backend development

Our core languages for backend development are:

- [Java](/manuals/programming-languages/java.html)
- [Python](/manuals/programming-languages/python/python.html)
- [Ruby](/manuals/programming-languages/ruby.html)

We've chosen these languages because they are successfully used by
teams at the moment, and we are confident in how to host and operate
applications written in them. You should carry out new
development in one of these languages.

We are also currently exploring the use of Node.js in the backend for
serverless systems, particularly in the Digital Identity programme.

### Python

You should write new Python projects in Python 3. 
[Python 2 reached end of life in 2020][PEP373]. Python 3 is now well-supported
by application frameworks and libraries, and is commonly used in
production.

[PEP373]: https://www.python.org/dev/peps/pep-0373/

### Go

Go is no longer a core backend development language in GDS.

The only Go service currently in production operation is the [GOV.UK
router][router], and it is the core language for [Cloud
Foundry](https://www.cloudfoundry.org/), which GOV.UK PaaS uses, although
GOV.UK PaaS is being [decommissioned][pass-decom]. As such, the knowledge and
experience of building and running services in Go is small and decreasing.

Go _may_ be an appropriate language for instances of systems programming, like
proxying, routing, and transforming HTTP requests. However you should only
write these sorts of components if there is no alternative maintained open
source tool available.

[router]: https://github.com/alphagov/router
[pass-decom]: https://gds.blog.gov.uk/2022/07/12/why-weve-decided-to-decommission-gov-uk-paas-platform-as-a-service/

### Languages we do not use for new projects

We used Scala in the early days of GDS. GOV.UK Licensing is the only remaining
application written in Scala but we've found it hard to support because of a lack
of skills in GDS. Do not use Scala for new projects.

## Mobile Development

For developing mobile apps, we use:
- [Swift](https://www.swift.org/) for [iOS](https://developer.apple.com/)
- [Kotlin](https://developer.android.com/kotlin) for [Android](https://developer.android.com/).

To give users the expected experience on their respective platform, we prefer to use the native languages over cross-platform solutions. 

### Swift

When starting a new app project, you'll likely want to use the most recent version of Swift which will be installed with Xcode.

Deciding on which iOS version you want to support is a more important version and is a tradeoff between making the app accessible to as many devices as possible without compromising security.

The iOS target should also be considered - for government apps, a range of n - 5 or n - 3 is generally a good starting point (n being the latest major release of iOS)
This should be discussed during planning and investigation as certain iOS features may not be available in earlier versions which could be crucial to your app's behaviour.

### Kotlin 
 
When satrting a new app, you'll likely want to use the latest version of Kotlin, which is installed along with Android Studio. 

It will be more important to decide on which versions of Android you want to support - as with iOS above, it is a tradeoff between trying to support as many devices as possible and keeping the app accessible without compromising security. 
This is also made more difficult on Android due to the range of devices available.

## Using other languages

There will be sensible reasons to not follow the above guidance on languages.
For example when you're:

- extending an existing codebase or ecosystem
- scripting in a particular environment
- experimenting during an alpha (with an expectation that it's replaced by something we have more confidence in for beta)
- working in a very specific or unusual problem domain, like heavy use of WebSockets

The set of languages we're comfortable supporting will change over time.

If you want to use a new language, talk to your Head of Technology and then create
a prototype. If it goes well you can [open a pull request](/standards/pull-requests.html) to change this document.

If you're having problems using one of the languages we support, open a pull request to
document the issues.
